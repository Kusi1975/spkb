{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kusi's Knowledgebase","text":"<p>This blog is a collection of useful things that I need in everyday work from time to time and maybe can help someone else.</p>"},{"location":"#sp20162019","title":"SP2016/2019","text":"<p>SharePoint</p> <p>SPFx</p> <p>PnP</p> <p>PowerShell</p>"},{"location":"#react","title":"React","text":"<p>React</p>"},{"location":"#azure","title":"Azure","text":"<p>VMs</p>"},{"location":"#power-platform","title":"Power Platform","text":"<p>Power Platform</p>"},{"location":"#m365","title":"M365","text":"<p>SPFx</p> <p>PnP</p> <p>PowerShell</p>"},{"location":"About/","title":"Kusi's Knowledge Base","text":""},{"location":"About/#about","title":"About","text":""},{"location":"About/#author","title":"Author","text":"<p>Markus K\u00f6nig, Senior Sharepoint/M365 Expert and Developer, Garaio AG, Bern, Switzerland</p>"},{"location":"About/links/","title":"Kusi's Knowledge Base","text":""},{"location":"About/links/#links","title":"Links","text":"<p>Roles KB</p>"},{"location":"Azure/VMs/","title":"Kusi's Knowledge Base","text":""},{"location":"Azure/VMs/#hyper-v-vm-to-azure","title":"Hyper-V VM to Azure","text":""},{"location":"Azure/VMs/#convert-vm-with-hyper-v-manager","title":"Convert VM with Hyper-V Manager","text":"<p>Open Hyper-V Manager</p> <p>Navigate to Actions / Edit Disk...</p> <p></p> <p>Convert</p> <p></p> <p>VHD</p> <p></p> <p>Fixed size</p> <p></p>"},{"location":"Azure/VMs/#prepare-vm","title":"Prepare VM","text":"<p>based on Microsoft Article</p> <p>Start the VM and install all Windows Updates and reboot</p> <p>After reboot start PowerShell:</p> <p>In Cmd:</p> <pre><code>diskpart.exe\nsan policy=onlineall\nexit\n\nsfc.exe /scannow\n</code></pre> <pre><code>netsh.exe winhttp reset proxy\nSet-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation -Name RealTimeIsUniversal -Value 1 -Type DWord -Force\nSet-Service -Name w32time -StartupType Automatic\npowercfg.exe /setactive SCHEME_MIN\npowercfg /setacvalueindex SCHEME_CURRENT SUB_VIDEO VIDEOIDLE 0\nSet-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name TEMP -Value \"%SystemRoot%\\TEMP\" -Type ExpandString -Force\nSet-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name TMP -Value \"%SystemRoot%\\TEMP\" -Type ExpandString -Force\nGet-Service -Name BFE, Dhcp, Dnscache, IKEEXT, iphlpsvc, nsi, mpssvc, RemoteRegistry | Where-Object StartType -ne Automatic | Set-Service -StartupType Automatic\nGet-Service -Name Netlogon, Netman, TermService | Where-Object StartType -ne Manual | Set-Service -StartupType Manual\nSet-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server' -Name fDenyTSConnections -Value 0 -Type DWord -Force\nSet-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services' -Name fDenyTSConnections -Value 0 -Type DWord -Force\nSet-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp' -Name PortNumber -Value 3389 -Type DWord -Force\nSet-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp' -Name LanAdapter -Value 0 -Type DWord -Force\nSet-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -Name UserAuthentication -Value 1 -Type DWord -Force\nSet-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services' -Name KeepAliveEnable -Value 1  -Type DWord -Force\nSet-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services' -Name KeepAliveInterval -Value 1  -Type DWord -Force\nSet-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp' -Name KeepAliveTimeout -Value 1 -Type DWord -Force\nSet-ItemProperty -Path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services' -Name fDisableAutoReconnect -Value 0 -Type DWord -Force\nSet-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp' -Name fInheritReconnectSame -Value 1 -Type DWord -Force\nSet-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp' -Name fReconnectSame -Value 0 -Type DWord -Force\nSet-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp' -Name MaxInstanceCount -Value 4294967295 -Type DWord -Force\nif ((Get-Item -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp').Property -contains 'SSLCertificateSHA1Hash')\n{\nRemove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -Name SSLCertificateSHA1Hash -Force\n}\nSet-NetFirewallProfile -Profile Domain, Public, Private -Enabled True\nEnable-PSRemoting -Force\nSet-NetFirewallRule -Name WINRM-HTTP-In-TCP, WINRM-HTTP-In-TCP-PUBLIC -Enabled True\nSet-NetFirewallRule -Group '@FirewallAPI.dll,-28752' -Enabled True\nSet-NetFirewallRule -Name FPS-ICMP4-ERQ-In -Enabled True\nNew-NetFirewallRule -DisplayName AzurePlatform -Direction Inbound -RemoteAddress 168.63.129.16 -Profile Any -Action Allow -EdgeTraversalPolicy Allow\nNew-NetFirewallRule -DisplayName AzurePlatform -Direction Outbound -RemoteAddress 168.63.129.16 -Profile Any -Action Allow\nchkdsk.exe /f\n</code></pre> <p>Reboot VM</p> <p>In Cmd:</p> <pre><code>bcdedit.exe /set \"{bootmgr}\" integrityservices enable\nbcdedit.exe /set \"{default}\" device partition=C:\nbcdedit.exe /set \"{default}\" integrityservices enable\nbcdedit.exe /set \"{default}\" recoveryenabled Off\nbcdedit.exe /set \"{default}\" osdevice partition=C:\nbcdedit.exe /set \"{default}\" bootstatuspolicy IgnoreAllFailures\nbcdedit.exe /set \"{bootmgr}\" displaybootmenu yes\nbcdedit.exe /set \"{bootmgr}\" timeout 5\nbcdedit.exe /set \"{bootmgr}\" bootems yes\nbcdedit.exe /ems \"{current}\" ON\nbcdedit.exe /emssettings EMSPORT:1 EMSBAUDRATE:115200\n</code></pre> <p>In PowerShell:</p> <pre><code>Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\CrashControl' -Name CrashDumpEnabled -Type DWord -Force -Value 2\nSet-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\CrashControl' -Name DumpFile -Type ExpandString -Force -Value \"%SystemRoot%\\MEMORY.DMP\"\nSet-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\CrashControl' -Name NMICrashDump -Type DWord -Force -Value 1\n$key = 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps'\nif ((Test-Path -Path $key) -eq $false) {(New-Item -Path 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting' -Name LocalDumps)}\nNew-ItemProperty -Path $key -Name DumpFolder -Type ExpandString -Force -Value 'C:\\CrashDumps'\nNew-ItemProperty -Path $key -Name CrashCount -Type DWord -Force -Value 10\nNew-ItemProperty -Path $key -Name DumpType -Type DWord -Force -Value 2\nSet-Service -Name WerSvc -StartupType Manual\nwinmgmt.exe /verifyrepository\n</code></pre> <p>Make sure no other applications than TermService are using port 3389</p> <pre><code>netstat.exe -anob | findstr :3389\nTCP    0.0.0.0:3389           0.0.0.0:0              LISTENING       4056\nTCP    [::]:3389              [::]:0                 LISTENING       4056\nUDP    0.0.0.0:3389           *:*                                    4056\nUDP    [::]:3389              *:*                                    4056\ntasklist /svc | findstr 4056\nsvchost.exe                   4056 TermService\n</code></pre> <p>In CMD:</p> <pre><code>mmc.exe\n</code></pre> <p>File / Add or Remove Snap-ins Add Group Policy Object Editor for Local Computer Navigate to Configuration\\Windows Settings\\Security Settings\\Local Policies\\User Rights Assignment</p> <p>Check they're not blocked:</p> <pre><code>Deny access to this computer from the network\n</code></pre> <pre><code>Deny log on through Remote Desktop Services\n</code></pre> <p>Check the:</p> <pre><code>Access this computer from the network\n</code></pre> <p>that the following groups should be listet:</p> <ul> <li>Administrators</li> <li>(Backup Operators)</li> <li>Everyone</li> <li>Users</li> </ul>"},{"location":"Azure/VMs/#upload-vm-disk","title":"Upload VM Disk","text":"<p>The Subscription must have Microsoft.Network and Microsoft.Compute registered under Resource providers</p> <p>Open in Browser Azure Portal</p> <ul> <li>Create a Ressource \"Storage Account\"</li> </ul> <p></p> <p></p> <p>Download Link and choose the OS</p> <p></p> <p>Install \"Microsoft Azure Storage Explorer\" and start it.</p> <p></p> <p>Select the file, enter a name and change account type to \"Standard SSD\" and click \"Create\" to upload the VM. This create a Disk in Azure after upload.</p> <p></p>"},{"location":"Azure/VMs/#create-vm-from-a-vm-disk","title":"Create VM from a VM Disk","text":"<p>Open in Browser Azure Portal</p> <ul> <li>Navigate to the Disk and Create a Virtual Computer on the Disk</li> </ul> <p></p> <ul> <li>Select the Subscription, Enter the Name of the VM.</li> <li>Snapshot type must be Full</li> <li>Change storage type default is Zone-redundant</li> </ul> <p></p> <p>Optional: Select the virtual machine and enter a DNS name:</p> <p></p>"},{"location":"Azure/VMs/#first-run-in-azure","title":"First Run in Azure","text":"<p>In PowerShell:</p> <p>Open File Explorer and check the drive letter for the Temporary Storage</p> <p></p> <pre><code>Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management' -Name PagingFiles -Value '&lt;Drive Letter&gt;:\\pagefile.sys' -Type MultiString -Force\n</code></pre> <p>Reboot the VM</p> <p>Check if Temporary Storage now not empty.</p> <p>Shutdown the VM</p> <p>In Azure Portal Navigate to the VM Navigate to Oveview and Shutdown the VM Navigate to Auto-shutdown set Enabled to on and define a Time and click on Save.</p>"},{"location":"Azure/VMs/#create-a-snapshot-from-a-vm","title":"Create a Snapshot from a VM","text":"<p>In Azure:</p> <ul> <li>Navigate to the Disk and create a Snapshot</li> </ul> <p></p> <ul> <li>Select the Subscription, Enter the Name of the VM.</li> <li>Snapshot type must be Full</li> <li>Change storage type default is Zone-redundant</li> </ul> <p></p>"},{"location":"Azure/VMs/#create-a-vm-from-a-snapshot","title":"Create a VM from a Snapshot","text":"<ul> <li>Navigate to the Snapshot and click on Create Disk</li> </ul> <ul> <li>Select the Subscription, Enter the Name of the Snapshot.</li> <li>Choose the Availibity Zone</li> <li>Change storage type to Standard SSD</li> </ul> <ul> <li>Naviagte to the Disk and Create VM</li> </ul> <ul> <li>Select the Subscription, Enter the Name of the VM.</li> <li>Select th Availabity option, for DEV VMs can you also be choose No infrastructure redundancy requeried.</li> <li>Choose the Size for use we use the D4s_v3 with 4 vCPUs and 16GB.</li> <li>Choose the License Type as example Windows Server</li> <li>If you have already have a license you can select booth checkboxes.</li> </ul>"},{"location":"Azure/VMs/#startstop-vm","title":"Start/Stop VM","text":"<p>Create resource \"Start/Stop VMs during off hours - V2\"</p> <p></p> <p>Edit Logic App</p> <p></p> <p>Show Code View</p> <p></p> <p>Then \"Save\" it and wit \"Run trigger\" it can run it on time.</p> <p>Enable Logic App</p> <p></p> <p>Example Logic App ..._Scheduled_start</p> <pre><code>{\n    \"definition\": {\n        \"$schema\": \"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#\",\n        \"actions\": {\n            \"Function-Catch\": {\n                \"actions\": {\n                    \"Terminate\": {\n                        \"inputs\": {\n                            \"runError\": {\n                                \"code\": \"@{outputs['Scheduled']('statusCode')}\",\n                                \"message\": \"@{body('Scheduled')}\"\n                            },\n                            \"runStatus\": \"Failed\"\n                        },\n                        \"runAfter\": {},\n                        \"type\": \"Terminate\"\n                    }\n                },\n                \"runAfter\": {\n                    \"Function-Try\": [\n                        \"Failed\",\n                        \"Skipped\",\n                        \"TimedOut\"\n                    ]\n                },\n                \"type\": \"Scope\"\n            },\n            \"Function-Success\": {\n                \"actions\": {},\n                \"runAfter\": {\n                    \"Function-Try\": [\n                        \"Succeeded\"\n                    ]\n                },\n                \"type\": \"Scope\"\n            },\n            \"Function-Try\": {\n                \"actions\": {\n                    \"Scheduled\": {\n                        \"inputs\": {\n                            \"body\": {\n                                \"Action\": \"start\",\n                                \"EnableClassic\": false,\n                                \"RequestScopes\": {\n                                    \"ExcludedVMLists\": [],\n                                    \"VMLists\": [\n                                        \"/subscriptions/[Subscription-ID]/resourceGroups/[Resource group name]/providers/Microsoft.Compute/virtualMachines/[VM Name]\"\n                                    ]\n                                }\n                            },\n                            \"function\": {\n                                \"id\": \"/subscriptions/[Subscription-ID]/resourceGroups/[Resource group name]/providers/Microsoft.Web/sites/[FunctionName]/functions/Scheduled\"\n                            }\n                        },\n                        \"runAfter\": {},\n                        \"type\": \"Function\"\n                    }\n                },\n                \"runAfter\": {},\n                \"type\": \"Scope\"\n            }\n        },\n        \"contentVersion\": \"1.0.0.0\",\n        \"parameters\": {},\n        \"triggers\": {\n            \"Recurrence\": {\n                \"evaluatedRecurrence\": {\n                    \"frequency\": \"Week\",\n                    \"interval\": 1,\n                    \"schedule\": {\n                        \"hours\": [\n                            \"8\"\n                        ],\n                        \"minutes\": [\n                            0\n                        ],\n                        \"weekDays\": [\n                            \"Saturday\"\n                        ]\n                    },\n                    \"timeZone\": \"W. Europe Standard Time\"\n                },\n                \"recurrence\": {\n                    \"frequency\": \"Week\",\n                    \"interval\": 1,\n                    \"schedule\": {\n                        \"hours\": [\n                            \"8\"\n                        ],\n                        \"minutes\": [\n                            0\n                        ],\n                        \"weekDays\": [\n                            \"Saturday\"\n                        ]\n                    },\n                    \"timeZone\": \"W. Europe Standard Time\"\n                },\n                \"type\": \"Recurrence\"\n            }\n        }\n    },\n    \"parameters\": {}\n}</code></pre> <p>Example Logic App ..._Scheduled_stop</p> <pre><code>{\n    \"definition\": {\n        \"$schema\": \"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#\",\n        \"actions\": {\n            \"Function-Catch\": {\n                \"actions\": {\n                    \"Terminate\": {\n                        \"inputs\": {\n                            \"runError\": {\n                                \"code\": \"@{outputs['Scheduled']('statusCode')}\",\n                                \"message\": \"@{body('Scheduled')}\"\n                            },\n                            \"runStatus\": \"Failed\"\n                        },\n                        \"runAfter\": {},\n                        \"type\": \"Terminate\"\n                    }\n                },\n                \"runAfter\": {\n                    \"Function-Try\": [\n                        \"Failed\",\n                        \"Skipped\",\n                        \"TimedOut\"\n                    ]\n                },\n                \"type\": \"Scope\"\n            },\n            \"Function-Success\": {\n                \"actions\": {},\n                \"runAfter\": {\n                    \"Function-Try\": [\n                        \"Succeeded\"\n                    ]\n                },\n                \"type\": \"Scope\"\n            },\n            \"Function-Try\": {\n                \"actions\": {\n                    \"Scheduled\": {\n                        \"inputs\": {\n                            \"body\": {\n                                \"Action\": \"stop\",\n                                \"EnableClassic\": false,\n                                \"RequestScopes\": {\n                                    \"ExcludedVMLists\": [],\n                                    \"VMLists\": [\n                                        \"/subscriptions/[Subscription-ID]/resourceGroups/[Resource group name]/providers/Microsoft.Compute/virtualMachines/[VM Name]\"\n                                    ]\n                                }\n                            },\n                            \"function\": {\n                                \"id\": \"/subscriptions/[Subscription-ID]/resourceGroups/[Resource group name]/providers/Microsoft.Web/sites/[FunctionName]/functions/Scheduled\"\n                            }\n                        },\n                        \"runAfter\": {},\n                        \"type\": \"Function\"\n                    }\n                },\n                \"runAfter\": {},\n                \"type\": \"Scope\"\n            }\n        },\n        \"contentVersion\": \"1.0.0.0\",\n        \"parameters\": {},\n        \"triggers\": {\n            \"Recurrence\": {\n                \"evaluatedRecurrence\": {\n                    \"frequency\": \"Week\",\n                    \"interval\": 1,\n                    \"schedule\": {\n                        \"hours\": [\n                            \"12\"\n                        ],\n                        \"minutes\": [\n                            0\n                        ],\n                        \"weekDays\": [\n                            \"Sunday\"\n                        ]\n                    },\n                    \"timeZone\": \"W. Europe Standard Time\"\n                },\n                \"recurrence\": {\n                   \"frequency\": \"Week\",\n                    \"interval\": 1,\n                    \"schedule\": {\n                        \"hours\": [\n                            \"12\"\n                        ],\n                        \"minutes\": [\n                            0\n                        ],\n                        \"weekDays\": [\n                            \"Sunday\"\n                        ]\n                    },\n                    \"timeZone\": \"W. Europe Standard Time\"\n                },\n                \"type\": \"Recurrence\"\n            }\n        }\n    },\n    \"parameters\": {}\n}</code></pre>"},{"location":"M365/PnP/","title":"Kusi's Knowledge Base","text":""},{"location":"M365/PnP/#m365-pnp","title":"M365 PnP","text":""},{"location":"M365/PnP/#install-pnp-powershell","title":"Install PnP PowerShell","text":"<pre><code>Install-Module -Name PnP.PowerShell -Force\n</code></pre>"},{"location":"M365/PnP/#connect-to-site-collection","title":"Connect to Site Collection","text":"<pre><code>Connect-PnPOnline -Url https://&lt;url&gt; -Interactive\n</code></pre>"},{"location":"M365/PnP/#login-with-certificate","title":"Login with certificate","text":"<pre><code>Register-PnPAzureADApp -ApplicationName \"PnPPowerShell\" -Store CurrentUser -Tenant &lt;Tenant&gt;.onmicrosoft.com -Interactive\nConnect-PnPOnline -Url https://&lt;url&gt; -ClientId &lt;ClientId&gt; -Thumbprint &lt;Thumbprint&gt; -Tenant &lt;Tenant&gt;.onmicrosoft.com\n</code></pre>"},{"location":"M365/PnP/#query-more-than-5000-elements","title":"Query more than 5000 elements","text":"<pre><code>Connect-PnPOnline ...\n$ctx = Get-PnPContext\n$ctx.Load($listTitle)\n$ctx.ExecuteQuery()\n$query = New-Object Microsoft.SharePoint.Client.CamlQuery\n$query.ViewXml = \"&lt;View Scope='RecursiveAll'&gt;&lt;Query&gt;&lt;Where&gt;&lt;/Where&gt;&lt;/Query&gt;&lt;RowLimit Paged='TRUE'&gt;500&lt;/RowLimit&gt;&lt;/View&gt;\"\n$query.AllowIncrementalResults = $true\nDo\n{\n$listItems = $list.GetItems($query)\n$ctx.Load($listItems)\n$ctx.ExecuteQuery()\nif ($listItems.count -gt 0) {\n$listItems |% {\nWrite-Host $_.FieldValues.FileRef \n}\n}\n$query.ListItemCollectionPosition = $listItems.ListItemCollectionPosition           \n}\nWhile($query.ListItemCollectionPosition -ne $null)\n</code></pre>"},{"location":"M365/PowerShell/","title":"Kusi's Knowledge Base","text":""},{"location":"M365/PowerShell/#m365-powershell","title":"M365 PowerShell","text":""},{"location":"M365/PowerShell/#get-powershell-version","title":"Get PowerShell Version","text":"<pre><code>$PSVersionTable\n</code></pre>"},{"location":"M365/PowerShell/#install-powershell-7","title":"Install Powershell 7","text":"<pre><code>winget install --id Microsoft.Powershell --source winget\n</code></pre>"},{"location":"M365/SPFx/","title":"Kusi's Knowledge Base","text":""},{"location":"M365/SPFx/#m365-spfx","title":"M365 SPFx","text":""},{"location":"M365/SPFx/#show-all-theme-colors","title":"Show all Theme colors","text":"<pre><code>    var palette = window.__themeState__.theme;\nvar containerElement = document.createElement(\"div\");\ncontainerElement.style.padding = \"1em\";\ncontainerElement.style.fontFamily = \"sans-serif\";\ncontainerElement.style.columnCount = \"3\";\ndocument.body.appendChild(containerElement);\nvar arr = Object.keys(palette).map(k =&gt; {\nvar colorElement = document.createElement(\"div\");\ncolorElement.style.marginTop = \"1ex\";\nvar nameElement = document.createElement(\"span\");\nnameElement.style.display = \"inline-block\";\nnameElement.style.minWidth = \"150px\";\nnameElement.innerHTML = k\ncolorElement.appendChild(nameElement);\nvar squareElement = document.createElement(\"span\");\nsquareElement.style.display = \"inline-block\";\nsquareElement.style.border = \"solid 1px #888\";\nsquareElement.style.width = \"12px\";\nsquareElement.style.height = \"12px\";\nsquareElement.style.margin = \"0 2px 0 1ex\";\nsquareElement.style.backgroundColor = window.__themeState__.theme[k];\ncolorElement.appendChild(squareElement);\nvar hexElement = document.createElement(\"span\");\nhexElement.innerHTML = window.__themeState__.theme[k];\ncolorElement.appendChild(hexElement);\ncontainerElement.appendChild(colorElement);\n});\n</code></pre>"},{"location":"M365/SPFx/#use-theme-color-in-inline-style","title":"Use Theme color in inline style","text":"<p>In WebPart definition:</p> <pre><code>import { IReadonlyTheme } from '@microsoft/sp-component-base';\nexport default class &lt;WebPartName&gt;WebPart {\nprivate _themeColors: IReadonlyTheme = undefined;\n...\n}\nprotected onThemeChanged(currentTheme: IReadonlyTheme | undefined): void {\nif (!currentTheme) {\nreturn;\n}\nthis._themeColors = currentTheme;\n}\n</code></pre> <p>In WebPart props definition:</p> <pre><code>import { IReadonlyTheme } from '@microsoft/sp-component-base';\nexport interface I&lt;WebPart&gt;Props {\nthemeColors: IReadonlyTheme;\n...\n}\n</code></pre> <p>In WebPart render function:</p> <pre><code> {this.props.themeColors ? (Object.keys(this.props.themeColors.semanticColors) as\n(keyof typeof this.props.themeColors.semanticColors)[]).map(k =&gt;\n&lt;div key={k}&gt;&lt;div style={{\ndisplay: 'inline-block',\nbackgroundColor: `${this.props.themeColors.semanticColors[k]}`,\nwidth: '30px', marginRight: '10px'\n}}&gt;&amp;nbsp;&lt;/div&gt;\n&lt;div style={{ display: 'inline-block' }}&gt;{this.props.themeColors.semanticColors[k]} - {k}&lt;/div&gt;\n&lt;/div&gt;) : ''}\n</code></pre>"},{"location":"M365/SPFx/#use-theme-color-in-scss","title":"Use Theme color in scss","text":"<pre><code>background-color: \"[theme: themeLighterAlt, default: #0078d7]\";\n</code></pre>"},{"location":"M365/SPFx/wordaddin/","title":"Word Add-In width SPFx using SharePoint","text":""},{"location":"M365/SPFx/wordaddin/#references","title":"References","text":"<ul> <li>Word add-in</li> <li>MSAL React Authentication</li> <li>SSO in Office App</li> <li>App Registration</li> </ul>"},{"location":"M365/SPFx/wordaddin/#app-registration","title":"App Registration","text":"<p>Navigate to: App Registration</p> <p>click on New registration</p> <p>Name: [Application Name] Supported account types: Accounts in any organizational directory (Any Azure AD directory - Multitenant) Redirect Url: Single page application (SPA) [Url to Service] as example https://brave-water-033784703.3.azurestaticapps.net/taskpane.html</p> <p></p> <p>Edit the Registration:</p>"},{"location":"M365/SPFx/wordaddin/#in-tab-authentication","title":"In Tab Authentication","text":"<p>Check Access tokens (used for implicit flows)</p> <p>Check ID tokens (used for implicit and hybrid flows)</p>"},{"location":"M365/SPFx/wordaddin/#in-tab-api-permission","title":"In Tab API permission","text":"<p>Add permission:</p> <ul> <li> <p>Microsoft Graph</p> </li> <li> <p>offline_access</p> </li> <li>openid</li> <li>User.Read</li> <li>profile</li> <li>Files.Read.All</li> <li> <p>Files.ReadWrite.All</p> </li> <li> <p>SharePoint</p> </li> <li>AllSites.Manage</li> <li>AllSites.Read</li> <li>AllSites.Write</li> </ul> <p>Click on Grant admin consent for ....</p>"},{"location":"M365/SPFx/wordaddin/#in-tab-expose-an-api","title":"In Tab Expose an API","text":"<p>Add a scope</p> <p></p> <p>Name: access_as_user Who can consent?: Admins and users Textfields: Enter a Comment</p> <p>Add a client application</p> <p>This Client ID is the default ID for give office access, add this ID to the App Registration.</p> <p></p> <p>Client ID: ea5a67f6-b6f3-4338-b240-c655ddc3cc8e</p> <p>Authorized scopes: check</p>"},{"location":"M365/SPFx/wordaddin/#demo-application","title":"Demo Application","text":"<p>Navigate to: App Registration</p> <p>Choose your App Registration and Navigate to Overview and click on Single-page application (SPA) </p> <p>Choose your Framework, in my case is React </p> <p>If Localhost for debugging not registerd in Authentication / Single-page application then click on Make this changes for me </p> <p>Download the Demo App package </p>"},{"location":"M365/SPFx/wordaddin/#create-project","title":"Create Project","text":"<p>Install NodeJS 16.20</p> <pre><code>npm install --global yo\nnpm install --global generator-office@1.9.7\nnpm i\n</code></pre> <p>Add WebApplication section after Resources node</p> <pre><code>    &lt;WebApplicationInfo&gt;\n&lt;Id&gt;[AppID]&lt;/Id&gt;\n&lt;Resource&gt;api://[ServiceUrl]/[AppID]&lt;/Resource&gt;\n&lt;Scopes&gt;\n&lt;Scope&gt;Files.Read.All&lt;/Scope&gt;\n&lt;Scope&gt;offline_access&lt;/Scope&gt;\n&lt;Scope&gt;openid&lt;/Scope&gt;\n&lt;Scope&gt;profile&lt;/Scope&gt;\n&lt;/Scopes&gt;\n&lt;/WebApplicationInfo&gt;\n</code></pre> <p>Add LoginOutButtons.tsx</p> <pre><code>export const LoginOutButtons = () =&gt; {\nconst isAuthenticated = useIsAuthenticated();\nconst { instance } = useMsal();\nconst handleLogin = () =&gt; {\ninstance.loginPopup(loginRequest).catch((e) =&gt; {\nconsole.log(e);\n});\n};\nconst handleLogout = () =&gt; {\ninstance.logoutPopup({\npostLogoutRedirectUri: \"/\",\nmainWindowRedirectUri: \"/\",\n});\n};\nreturn isAuthenticated ? (\n&lt;div&gt;\n&lt;DefaultButton\niconProps={{ iconName: \"SignOut\" }}\nonClick={() =&gt; handleLogout()}\n&gt;\nSign OUT\n&lt;/DefaultButton&gt;\n&lt;/div&gt;\n) : (\n&lt;div&gt;\n&lt;DefaultButton\niconProps={{ iconName: \"Signin\" }}\nonClick={() =&gt; handleLogin()}\n&gt;\nSign IN\n&lt;/DefaultButton&gt;\n&lt;/div&gt;\n);\n};\n</code></pre> <p>Add following lines to index.tsx</p> <pre><code>...\nimport { PublicClientApplication } from \"@azure/msal-browser\";\nimport { msalConfig } from \"./authConfig\";\nimport { MsalProvider } from \"@azure/msal-react\";\nconst msalInstance: PublicClientApplication = new PublicClientApplication(msalConfig);\n...\n&lt;MsalProvider instance={msalInstance}&gt;\n&lt;Component title={title} isOfficeInitialized={isOfficeInitialized} /&gt;\n&lt;/MsalProvider&gt;\n...\n</code></pre> <p>Add following lines to App.tsx</p> <pre><code>import { MsalContext } from \"@azure/msal-react\";\nimport { AccountInfo, IPublicClientApplication, RedirectRequest } from \"@azure/msal-browser\";\n...\nconst msalInstance: IPublicClientApplication = this.context.instance;\nconst msalAccounts: AccountInfo[] = this.context.accounts;\nconst msalIsAuthenticated: boolean = this.context.accounts &amp;&amp; this.context.accounts.length &gt; 0;\n...\nconst url = new URL(Office.context.document.url);\nconst request: RedirectRequest = {\naccount: accounts[0],\nscopes: [url.origin + \"/.default\"],\n};\ninstance.acquireTokenSilent(request).then((response) =&gt; {\nfetch(url.origin + \"/_api/web/allProperties\", {\nmethod: \"GET\",\nheaders: {\nAuthorization: `Bearer ${response.accessToken}`,\n\"Content-Type\": \"application/json\",\nAccept: \"application/json\",\n},\n})\n.then((res) =&gt; res.json())\n.then((res) =&gt; {\n...\n});\n});\n</code></pre>"},{"location":"M365/SPFx/wordaddin/#test-in-word-for-browser","title":"Test in Word for Browser","text":"<pre><code>npm run start:web -- --document {url}\n</code></pre> <p>example:</p> <pre><code>npm run start:web -- --document \"https://m365x32525383.sharepoint.com/:w:/r/_layouts/15/Doc.aspx?sourcedoc=%7B3CC1D7E1-D465-4D25-97D6-14892CDF8D63%7D&amp;file=Personal%20employees%20information.docx&amp;action=default&amp;mobileredirect=true\"\n</code></pre> <p>Allow localhost loopback for Microsoft Edge Web Browser?: No</p>"},{"location":"M365/SPFx/wordaddin/#create-pakage","title":"Create Pakage","text":"<p>Create Pakage with command</p> <pre><code>npm run build\n</code></pre> <p>This create the folder dist. Copy the content of this folder to a WebService.</p>"},{"location":"M365/SPFx/wordaddin/#service-debloyment-with-azure-static-web-app","title":"Service Debloyment with Azure Static Web App","text":"<p>As folder for the Azure Static Web App can be used a Git Repo folder in DevOps.</p> <p>Navigate to the Azure Portal</p> <p>Create a ressource Static Web App in Categorie Web</p> <p></p> <p>Select Source Azure DevOps and choose the right repo</p> <p>Select HTML as build presets. the App location is the path in the Repo to the webservice directory.</p> <p></p> <p>After create the App it generate a *.yml file in the root folder of this repo. You can get it with pull the Git repo.</p> <p>In YML File edit the section:</p> <pre><code>  app_location: \"/[path to webservice file directory]\" # App source code path\n  api_location: \"\" # Api source code path - optional\n  output_location: \"/\" # Built app content directory - optional\n  skip_app_build: true\n  action: 'upload'\n</code></pre> <p>The service need a index.html file in the root folder, you can create an empty file and add it to the webservice deployment folder.</p> <p>Url from Static WebApp update in webpack.config.js in parameter urlProd used in manifest.xml as example: https://brave-water-033784703.3.azurestaticapps.net/</p>"},{"location":"M365/SPFx/wordaddin/#register-manifest","title":"Register Manifest","text":"<p>Edit the Manifest.xml in the dist folder. The Resource url in the WebApplicationInfo section is like api://[WebService Url]/ as example: api://brave-water-033784703.3.azurestaticapps.net/bbfb4a25-931c-41cb-b835-bf72f520375f <p>The Manifest file define the new action and after upload the file the button is visible in Word.</p> <p>Navigate to: Admin Center</p> <p>Click on Upload custom apps</p> <p></p> <p>Choose Office Add-in and upload the manifest.xml file with Choose File</p> <p></p> <p>Choose Entire organization</p> <p></p> <p>Click Accept Permission</p> <p></p> <p>Click Accept</p> <p></p> <p>Click Next</p> <p></p> <p>Click Finish deployment</p> <p></p> <p>Click Done</p> <p></p>"},{"location":"PowerPlatform/","title":"Kusi's Knowledge Base","text":""},{"location":"PowerPlatform/#powerplatform","title":"PowerPlatform","text":""},{"location":"PowerPlatform/#permission-for-dataverse-tables-in-a-solution","title":"Permission for Dataverse tables in a Solution","text":"<p>Navigate to PowerPlatform Admin Center</p> <ul> <li>Select in the left Navigation Enviornments</li> <li>Click on the right Environment</li> <li>Click in the Section Acccess / Security roles on See all</li> <li>Click on New role and choose the organisation and create a new role </li> <li>Choose the new role </li> <li>Search the table</li> <li>Navigate to ... / Permission Settings or choose in the drop downs the right permissions</li> <li>Save the changes</li> </ul>"},{"location":"PowerPlatform/CoE/","title":"Kusi's Knowledge Base","text":""},{"location":"PowerPlatform/CoE/#powerplatform","title":"PowerPlatform","text":""},{"location":"PowerPlatform/CoE/#center-of-excellence","title":"Center of Excellence","text":"<p>Installation References:</p> <p>Installation Video</p> <p>Installation CoE Starter Kit</p> <p>Download CoE Starter Kit</p> <p>Setup core components</p> <p>Setup creator kit</p> <p>Setup Power BI</p>"},{"location":"PowerPlatform/Flow/","title":"Kusi's Knowledge Base","text":""},{"location":"PowerPlatform/Flow/#powerplatform-flow","title":"PowerPlatform Flow","text":""},{"location":"PowerPlatform/Flow/#send-mail-on-add-item-depend-on-a-lookup-value-from-a-dataverse-table","title":"Send Mail on add item depend on a lookup value from a Dataverse table","text":"<ul> <li>Add Action Add a new row Dataverse</li> </ul> Property Value Environment (Current) Table name &lt;TableName&gt; Scope Organization <ul> <li>Add Action Get a row by ID Dataverse</li> </ul> Property Value Table name &lt;LookupTable&gt; Row ID &lt;TableName&gt; <ul> <li>Add Action Compose</li> </ul> Property Value Input &lt;LookupFieldName&gt; <ul> <li>Add Action Send an email (v2) Outlook</li> </ul> <p>If you have multi Compose, split each with a semicolon</p> Property Value To Outputs"},{"location":"PowerPlatform/PowerFx/","title":"Kusi's Knowledge Base","text":""},{"location":"PowerPlatform/PowerFx/#powerplatform","title":"PowerPlatform","text":""},{"location":"PowerPlatform/PowerFx/#learning","title":"Learning","text":"<p>App in a day</p>"},{"location":"PowerPlatform/PowerFx/#power-fx-examples","title":"Power Fx Examples","text":""},{"location":"PowerPlatform/PowerFx/#show-another-canvas","title":"Show another Canvas","text":"<p>On Button the OnSelect property</p> <pre><code>Navigate(&lt;CanvasName&gt;)\n</code></pre>"},{"location":"PowerPlatform/PowerFx/#update-item-with-specific-values","title":"Update item with specific values","text":"<p>On Button the OnSelect property</p> <pre><code>Patch(&lt;DataSource&gt;, &lt;GalleryName&gt;.Selected,{&lt;Field1&gt;:&lt;Value1&gt;,&lt;Field2&gt;:&lt;Value2&gt;});Refresh(&lt;DataSource&gt;)\n</code></pre>"},{"location":"PowerPlatform/PowerFx/#save-form","title":"Save Form","text":"<p>On Button the OnSelect property</p> <pre><code>SubmitForm(&lt;FormName&gt;)\n</code></pre>"},{"location":"PowerPlatform/PowerFx/#remove-selected-item","title":"Remove selected item","text":"<p>On Button the OnSelect property</p> <pre><code>Remove(&lt;DataSource&gt;, &lt;GalleryName&gt;.Selected);Refresh(&lt;DataSource&gt;)\n</code></pre>"},{"location":"PowerPlatform/PowerFx/#display-labels-from-multi-termfield","title":"Display labels from Multi TermField","text":"<p>On Label the Text property</p> <pre><code>Concat(ThisItem.&lt;TermField&gt;, Label, \";\")\n</code></pre>"},{"location":"PowerPlatform/PowerFx/#highlight-selected-entry-in-gallery-in-templatefill-property","title":"Highlight selected Entry in Gallery in TemplateFill property","text":"<p>On Gallery the OnSelect property</p> <pre><code>If(ThisItem.IsSelected, RGBA(128, 128, 128, 0.2),  RGBA(0, 0, 0, 0))\n</code></pre>"},{"location":"PowerPlatform/PowerFx/#new-form","title":"New Form","text":"<p>On Canvas the OnVisible property</p> <pre><code>NewForm(&lt;EditFormName&gt;)\n</code></pre> <p>On EditForm the DefaultMode property</p> <pre><code>FormMode.New\n</code></pre>"},{"location":"React/","title":"Kusi's Knowledge Base","text":""},{"location":"React/#react","title":"React","text":""},{"location":"React/#promise","title":"Promise","text":"<p>Wait on Promise from Sub Async functions in a loop.</p> <pre><code>    public static async getItemNamesAsync(itemids: number[]\nsiteUrl: string, spHttpClient: SPHttpClient): Promise&lt;string[]&gt; {\nreturn new Promise&lt;string[]&gt;(resolve =&gt; {\nconst itemsDetail: string[] = [];\nconst allPromises: Promise&lt;string&gt;[] = [];\nthis.getItemsAsync(itemids).then((items) =&gt; {\nfor (const item of items) {\nallPromises.push(this.getDetailInfoAsync(item.id, siteUrl, spHttpClient));\n}\nPromise.all(allPromises).then((all: string[]) =&gt; {\nall.forEach(i =&gt; {\nitemsDetail.push(i);\n});\nresolve(itemsDetail);\n});\n});\n});\n}\n</code></pre>"},{"location":"React/#get-url-parameter","title":"Get Url Parameter","text":"<pre><code>private GetUrlParameters(): { [id: string]: string } {\nconst params: { [id: string]: string } = {};\ndocument.location.search.substring(1).split('&amp;').forEach(t =&gt; {\nif (t.indexOf('=') &gt; 0) {\nparams[t.substring(0, t.indexOf('=')).toLowerCase()] = decodeURIComponent(t.substring(t.indexOf('=') + 1));\n}\n});\nreturn params;\n}\n</code></pre>"},{"location":"React/#caching","title":"Caching","text":"<p>Save object in cache <pre><code>localStorage.setItem(storageKey, object);\n</code></pre></p> <p>Get object from cache <pre><code>const object = localStorage.getItem(storageKey);\n</code></pre></p>"},{"location":"React/#interval","title":"Interval","text":"<pre><code>private interval: number = undefined;\npublic componentDidMount(): void {\nif (!this.interval) {\nthis.interval = setInterval(() =&gt; {\n...\n}, 1000);\n}\n}\npublic componentWillUnmount(): void {\nif (this.interval) {\nclearInterval(this.interval);\n}\n}\n</code></pre>"},{"location":"onPrem/PnP/","title":"Kusi's Knowledge Base","text":""},{"location":"onPrem/PnP/#onprem-pnp","title":"OnPrem PnP","text":""},{"location":"onPrem/PnP/#install-pnp-module","title":"Install PnP Module","text":"<pre><code>Install-Module SharePointPnPPowerShell2016\n</code></pre>"},{"location":"onPrem/PnP/#update-pnp-module","title":"Update PnP Module","text":"<pre><code>Update-Module SharePointPnPPowerShell*\n</code></pre>"},{"location":"onPrem/PnP/#get-pnp-module","title":"Get PnP Module","text":"<pre><code>Get-Module SharePointPnPPowerShell* -ListAvailable | Select-Object Name,Version | Sort-Object Version -Descending\n</code></pre>"},{"location":"onPrem/PnP/#connect-with-current-credentials","title":"Connect with current credentials","text":"<pre><code>Connect-PnPOnline -Url https://[Url] -CurrentCredentials\n</code></pre>"},{"location":"onPrem/PnP/#connect-with-web-login-credentials","title":"Connect with web login credentials","text":"<pre><code>Connect-PnPOnline -Url https://[Url] -UseWebLogin\n</code></pre>"},{"location":"onPrem/PowerShell/","title":"Kusi's Knowledge Base","text":""},{"location":"onPrem/PowerShell/#onprem-powershell","title":"OnPrem PowerShell","text":""},{"location":"onPrem/PowerShell/#load-sharepoint-script","title":"Load SharePoint script","text":"<pre><code>Add-PSSnapin Microsoft.SharePoint.PowerShell -ErrorAction SilentlyContinue\n</code></pre>"},{"location":"onPrem/PowerShell/#update-content-database","title":"Update content database","text":"<pre><code>Get-SPContentDatabase |% { Upgrade-SPContentDatabase -Identity $_.Id -Confirm:$false }\n</code></pre>"},{"location":"onPrem/PowerShell/#update-ca-content-database","title":"Update CA content database","text":"<pre><code>$wa = Get-SPWebApplication -IncludeCentralAdministration | Where { $_.DefaultServerComment -eq \"SharePoint Central Administration v4\"}\nGet-SPContentDatabase -WebApplication $wa |% { Upgrade-SPContentDatabase -Identity $_.Id -Confirm:$false }\n</code></pre>"},{"location":"onPrem/PowerShell/#new-developer-certificate","title":"New developer certificate","text":"<pre><code>Import-Module WebAdministration\nSet-Location IIS:\\SslBindings\nNew-WebBinding -Name \"Default Web Site\" -IP \"*\" -Port 443 -Protocol https\n$c = New-SelfSignedCertificate -DnsName *.myexample.com,*.my.com -CertStoreLocation cert:\\LocalMachine\\My\n</code></pre> <p>Open mmc.exe and add Server Certificate</p> <p>Copy New Certificate from Personal to Trusted Root Certifiaction Authorities</p> <p>Open IIS and change the Binding Certificate</p>"},{"location":"onPrem/PowerShell/#error-cannot-be-loaded-because-running-scripts-is-disabled-on-this-system","title":"Error: cannot be loaded because running scripts is disabled on this System","text":"<pre><code>Set-ExecutionPolicy -ExecutionPolicy Unrestricted\n</code></pre>"},{"location":"onPrem/PowerShell/#get-all-loaded-assemblies-in-powershell","title":"Get all loaded assemblies in Powershell","text":"<pre><code>[System.AppDomain]::CurrentDomain.GetAssemblies() | Where-Object Location | Sort-Object -Property FullName | Select-Object -Property Name, Location, Version | Out-GridView\n</code></pre>"},{"location":"onPrem/PowerShell/#script-as-scheduled-task","title":"Script as scheduled task","text":"<p>Select Run whetever user is logged on or not and Run with highest privileges</p> <p></p> <p>Add a Trigger with the repeating interval you want.</p> <p></p> <p>Add an Action with the values:</p> <ul> <li>Program/script: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</li> <li>Add arguments: -ExecutionPolicy Bypass -File \"[Path]\\[Scriptname].ps1\"</li> <li>Start in: [Path]</li> </ul> <p></p>"},{"location":"onPrem/SP/","title":"Kusi's Knowledge Base","text":""},{"location":"onPrem/SP/#sharepoint-2016-2019","title":"SharePoint 2016 / 2019","text":""},{"location":"onPrem/SP/#close-connection-to-reconnect-with-another-user","title":"Close Connection to reconnect with another user","text":"<pre><code>https:&lt;&gt;/_layouts/closeConnection.aspx?loginasanotheruser=true\n</code></pre>"},{"location":"onPrem/SP/#app-launcher","title":"App Launcher","text":"<pre><code>Enable-SPFeature -identity CustomTiles\n</code></pre> <p>Edit List on</p> <pre><code>https:&lt;&gt;/Lists/Custom Tiles\n</code></pre>"},{"location":"onPrem/SP/#mobile-view","title":"Mobile View","text":"<p>For a better mobile view feeling you can add in the Master Page in the Head Element.</p> <pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n</code></pre>"},{"location":"onPrem/SP/#webservice-in-wsp","title":"WebService in WSP","text":"<p>Create a new Visual Studio Project SharePoint Empty Project</p> <p></p> <p>In the Solution Explorer on the Project right click an choose Add... and then Mapped Folder</p> <p></p> <p>select the ISAPI Folder</p> <p></p> <p>IMPORTANT: take all folders and file names in lower case, otherwise the service will not working.</p> <p>Add a Project folder and then 3 files and add it to the Projectfolder in the ISAPI Folder.</p> <p>Create a file [servicename].svc with following content:</p> <pre><code>&lt;%@ ServiceHost Language=\"C#\" Debug=\"true\"\n    Service=\"[ServicenameInclNamespace], $SharePoint.Project.AssemblyFullName$\"\n    CodeBehind=\"[servicename].svc.cs\"\n    Factory=\"Microsoft.SharePoint.Client.Services.MultipleBaseAddressWebServiceHostFactory,\n    Microsoft.SharePoint.Client.ServerRuntime, Version=16.0.0.0, Culture=neutral,\n    PublicKeyToken=71e9bce111e9429c\" %&gt;\n</code></pre> <p>Create a file [servicename].svc.cs with following content:</p> <pre><code>namespace [Namespace]\n{\nclass [ServiceName] : [InterfaceServiceName]\n{\npublic string [FunctionName](string [PropertyName])\n{\n}\n}\n}\n</code></pre> <p>Create a file I[Servicename].cs with following content:</p> <pre><code>using System.ServiceModel;\nusing System.ServiceModel.Web;\nnamespace [Namespace]\n{\n[ServiceContract]\ninterface [IntefaceServiceName]\n{\n[OperationContract]\n[WebGet(UriTemplate = \"[ServiceFunctionName]/{[PropertyName]}\",\nResponseFormat = WebMessageFormat.Json)]\nstring [FunctionName](string [PropertyName]);\n}\n}\n</code></pre> <p>Create a WSP with Publish the Project and deploy the WSP to the server. After deployment the service can called like:</p> <pre><code>https://[SharePointWebUrl]/_vti_bin/[FolderStructureBelowISAPI][ServiceName].svc/[ServiceFunctionName]/[PropertyName]\n</code></pre>"},{"location":"onPrem/SPFx/","title":"Kusi's Knowledgebase","text":""},{"location":"onPrem/SPFx/#onprem-spfx","title":"OnPrem SPFx","text":""},{"location":"onPrem/SPFx/#spfx-introduction-manual","title":"SPFx Introduction Manual","text":"<p>Introduction</p> <p>Development environment</p> <p>Create a new project</p> <p>Project structure</p> <p>Migrate SPFx 2016 to 2019</p>"},{"location":"onPrem/SPFx/#gulp-serve-with-localizaion","title":"gulp serve with localizaion","text":"<pre><code>gulp serve --locale de-de\n</code></pre>"},{"location":"onPrem/SPFx/#gulp-dist-for-sp201619","title":"gulp dist for SP2016/19","text":"<p>gulp dist replace the steps:</p> <pre><code>gulp clean\ngulp build\ngulp bundle --ship\ngulp package-solution --ship\n</code></pre> <p>Install gulp-sequence</p> <pre><code>npm install gulp-sequence --save-dev\n</code></pre> <p>edit file gulpfile.js</p> <pre><code>'use strict';\nif (process.argv.indexOf('dist') !== -1){\nprocess.argv.push('--ship');\n}\nconst gulp = require('gulp');\nconst build = require('@microsoft/sp-build-web');\nconst gulpSequence = require('gulp-sequence');\nbuild.addSuppression(`Warning - [sass] The local CSS class 'ms-Grid' is not camelCase and will not be type-safe.`);\ngulp.task('dist', gulpSequence('clean', 'bundle', 'package-solution'));\nbuild.initialize(gulp);\n</code></pre>"},{"location":"onPrem/SPFx/#get-listitem-by-id","title":"Get ListItem by ID","text":"<pre><code>this.props.spHttpClient.get(\nencodeURI(`${this.props.siteurl}/_api/web/lists/getbytitle('${listName}')/items(${itemId})?$select=Id,Title`),\nSPHttpClient.configurations.v1)\n.then(res =&gt; res.json())\n.then(res =&gt; {\n...\n});\n</code></pre>"},{"location":"onPrem/SPFx/#get-listitem-by-filter","title":"Get ListItem by filter","text":"<pre><code>this.props.spHttpClient.get(\nencodeURI(`${this.props.siteurl}/_api/web/lists/getbytitle('${listName}')/items(${itemId})?$filter=Title eq '...'&amp;$select=Id,Title`),\nSPHttpClient.configurations.v1)\n.then(res =&gt; res.json())\n.then(res =&gt; {\n...\n});\n</code></pre>"},{"location":"onPrem/SPFx/#caml-query","title":"CAML Query","text":"<pre><code>this._webPartContext.spHttpClient.post(\n`${this.props.siteUrl}/_api/web/lists/GetByTitle('${this.listName}')/GetItems`,\nSPHttpClient.configurations.v1,\n{\nheaders: {\n'odata-version': '3.0',\n'content-type': 'application/json;odata=verbose',\n'accept': 'application/json;odata=verbose'\n},\nbody: JSON.stringify(\n{\n'query': {\n'__metadata': { 'type': 'SP.CamlQuery' },\n'ViewXml': `&lt;View&gt;&lt;Query&gt;&lt;Where&gt;${viewXml}&lt;/Where&gt;&lt;OrderBy&gt;&lt;FieldRef Name='Title' Ascending='False' /&gt;&lt;/OrderBy&gt;&lt;/Query&gt;&lt;/View&gt;`\n}\n}),\nmethod: 'POST'\n})\n.then(res =&gt; res.json())\n.then(res =&gt; {\n...\n});;\n</code></pre>"},{"location":"onPrem/SPFx/#create-listitem","title":"Create ListItem","text":"<pre><code>this.props.spHttpClient.post(\n`${this.props.siteurl}/_api/web/lists/GetByTitle('${listName}')/items`,\nSPHttpClient.configurations.v1, {\nheaders: {\n'odata-version': '3.0',\n'Accept': 'application/json;odata=verbose',\n'Content-Type': 'application/json;odata=verbose'\n},\nbody: JSON.stringify(\n{\n'__metadata': {\n'type': `SP.Data.${listName}ListItem`\n},\n'Title': ...\n}\n),\nmethod: 'POST'\n}).then(r =&gt; {\n...\n});\n</code></pre>"},{"location":"onPrem/SPFx/#update-listitem","title":"Update ListItem","text":"<pre><code>this.props.spHttpClient.post(\n`${this.props.siteurl}/_api/web/lists/GetByTitle('${listName}')/items(${itemId})`,\nSPHttpClient.configurations.v1, {\nheaders: {\n'odata-version': '3.0',\n'Accept': 'application/json;odata=verbose',\n'Content-Type': 'application/json;odata=verbose',\n'IF-MATCH': '*',\n'X-HTTP-Method': 'MERGE'\n},\nbody: JSON.stringify(\n{\n'__metadata': {\n'type': `SP.Data.${listName}ListItem`\n},\n'Title': ...\n}\n),\nmethod: 'POST'\n}).then(res =&gt; {\n...\n});\n</code></pre>"},{"location":"onPrem/SPFx/#delete-listitem","title":"Delete ListItem","text":"<pre><code>this.props.spHttpClient.post(\n`${this.props.siteurl}/_api/web/lists/GetByTitle('${listName}')/items(${itemId})`,\nSPHttpClient.configurations.v1, {\nheaders: {\n'odata-version': '3.0',\n'Accept': 'application/json;odata=nometadata',\n'Content-Type': 'application/json;odata=verbose',\n'IF-MATCH': '*',\n'X-HTTP-Method': 'DELETE'\n},\nmethod: 'POST'\n}).then(r =&gt; {\n...\n});\n</code></pre>"},{"location":"onPrem/SPFx/#search","title":"Search","text":"<pre><code>const postData: string = JSON.stringify({\n'request': {\n'__metadata': {\n'type': 'Microsoft.Office.Server.Search.REST.SearchRequest' },\n'Querytext': `ContentTypeId:\"${contentTypeId}*\" ${queryText ? `\"${queryText}\" ` : ''}`\n} });\nSPHttpClient.post(\n`${this.props.siteurl}/_api/search/postquery`,\nSPHttpClient.configurations.v1, {\nheaders: {\n'odata-version': '3.0',\n'Accept': 'application/json;odata=verbose',\n'Content-Type': 'application/json;odata=verbose',\n'Content-Length': postData.length.toString()\n},\nbody: postData,\nmethod: 'POST'\n}\n)\n.then(response =&gt; response.json())\n.then(response =&gt; {\nif (!(response)) {\nreturn;\n}\nresolve(response.d.postquery.PrimaryQueryResult.RelevantResults.Table.Rows.results);\n});\n</code></pre>"},{"location":"onPrem/SPFx/#send-mail","title":"Send Mail","text":"<pre><code>this._webPartContext.spHttpClient.get(\nthis._webAbsoluteUrl + '/_api/web/currentuser',\nSPHttpClient.configurations.v1\n)\n.then(res =&gt; res.json())\n.then(currentuser =&gt; {\nthis._webPartContext.spHttpClient.post(\nthis._webAbsoluteUrl + \"/_api/SP.Utilities.Utility.SendEmail\",\nSPHttpClient.configurations.v1,\n{\nheaders: {\n'content-type': 'application/json;odata=verbose',\n'accept': 'application/json;odata=verbose'\n},\nbody: JSON.stringify({\n'properties': {\n'To': [eMail],\n'CC': currentuser.Email,\n'Subject': '...',\n'Body': '&lt;div&gt;' +\n...\n'&lt;/div&gt;'\n}\n}),\nmethod: 'POST'\n}).then(resp =&gt; { resolve(true); });\n})\n.catch(err =&gt; {\nconsole.log(err);\nresolve(false);\n});\n</code></pre>"},{"location":"onPrem/SPFx/#rxjseventemitter","title":"RxJsEventEmitter","text":"<p>To communicate between 2 WebParts you can use the RxJSEventEmitter</p> <pre><code>npm i rx-lite\nnpm i @types/rx-lite\n</code></pre>"},{"location":"onPrem/SPFx/#receiver-webpart","title":"Receiver WebPart","text":"<pre><code>import { RxJsEventEmitter } from './RxJsEventEmitter';\nexport default class ... {\nprivate readonly eventEmitter: RxJsEventEmitter = RxJsEventEmitter.getInstance();\n...\nprivate onClick(...): void {\n...\nthis.eventEmitter.emit('timShareData', data);\n} }\n</code></pre>"},{"location":"onPrem/SPFx/#sender-webpart","title":"Sender WebPart","text":"<pre><code>import { RxJsEventEmitter } from './RxJsEventEmitter';\nexport default class ... {\nprivate readonly eventEmitter: RxJsEventEmitter = RxJsEventEmitter.getInstance();\npublic constructor(...) {\nthis.eventEmitter.on('timShareData', this.receiveData.bind(this));\n...\n}\n...\nprotected receiveData(data: IEventData): void {\n...\n}\n}\n</code></pre>"},{"location":"onPrem/SPFx/#rxjseventemitterts","title":"RxJsEventEmitter.ts","text":"<pre><code>import { Subject } from 'rx-lite';\nexport class RxJsEventEmitter {\npublic subjects: Object;\n// tslint:disable-next-line: no-any\npublic readonly hasOwnProp: any = {}.hasOwnProperty;\n// tslint:disable:no-string-literal\npublic static getInstance(): RxJsEventEmitter {\nif (!window['RxJsEventEmitter']) {\nwindow['RxJsEventEmitter'] = new RxJsEventEmitter();\n}\nreturn window['RxJsEventEmitter'];\n}\npublic emit(name: string, data: Object): void {\nconst fnName: string = this._createName(name);\nif (!this.subjects[fnName]) {\nthis.subjects[fnName] = new Subject();\n}\nthis.subjects[fnName].onNext(data);\n}\npublic on(name: string, handler: any): void {\nconst fnName: string = this._createName(name);\nif (!this.subjects[fnName]) {\nthis.subjects[fnName] = new Subject();\n}\nthis.subjects[fnName].subscribe(handler);\n}\npublic off(name: string): void {\nconst fnName: string = this._createName(name);\nif (this.subjects[fnName]) {\nthis.subjects[fnName].dispose();\ndelete this.subjects[fnName];\n}\n}\npublic dispose(): void {\nconst subjects: Object = this.subjects;\nfor (const prop in subjects) {\nif (this.hasOwnProp.call(subjects, prop)) {\nsubjects[prop].dispose();\n}\n}\nthis.subjects = {};\n}\nprivate constructor() {\nthis.subjects = {};\n}\nprivate _createName(name: string): string {\nreturn `$${name}`;\n}\n}\n</code></pre>"},{"location":"onPrem/SPFx/#ui-fabric-icons","title":"UI Fabric Icons","text":"<p>https://uifabricicons.azurewebsites.net</p>"},{"location":"onPrem/SPFx/createProject/","title":"Kusi's SPFx Knowledgebase","text":""},{"location":"onPrem/SPFx/createProject/#create-a-new-project","title":"Create a new project","text":""},{"location":"onPrem/SPFx/createProject/#create-the-project-structure","title":"Create the project structure","text":"<p>A new project can be created with the Yeoman or another WebPart can be added to an existing project in the same way.</p> <p>Switch to the project folder in Powershell and call it up. Then select @microsoft/sharepoint as generator.</p> <p></p> <p>Enter a project name and then select for which SharePoint version a WebPart would like to be developed.</p> <p></p> <p>Choose whether to create the project in the current folder or in a subfolder.</p> <p></p> <p>After that you will be asked if you want to publish this package to all sites without \u00abAdd app\u00bb. (SP2019, online)</p> <p>After that you will be asked if this package needs rights to access web APIs. (On-line)</p> <p></p> <p>After that you will be asked what you want to create, the following is your choice.</p>"},{"location":"onPrem/SPFx/createProject/#webpart-sp2016-sp2019-online","title":"WebPart (SP2016, SP2019, Online)","text":"<p>These WebParts are available in both Classic and Modern design.</p> <pre>\nTip: There shouldn't be more than 10 WebParts in a package, because the creation gets slower and slower and from 10 it gets noticeably slower and makes debugging a bit more cumbersome. In business it doesn't matter.\n</pre>"},{"location":"onPrem/SPFx/createProject/#extension-sp2019-online","title":"Extension (SP2019, Online)","text":"<p>With Extension, components in Modern Page can be placed at predefined zones such as headers or footers. For example, you can render your own navigation or footer on all Modern Sites.</p>"},{"location":"onPrem/SPFx/createProject/#library-online","title":"Library (Online)","text":"<p>The Library option is available online, with which only released code can be referenced.</p>"},{"location":"onPrem/SPFx/createProject/#build-project","title":"Build project","text":"<p>The developer certificate must be installed for the first time:</p> <pre><code>gulp trust-dev-cert\n</code></pre> <p>If something went wrong with the installation of the developer certificate, this can be reversed and then installed again:</p> <pre><code>gulp untrust-dev-cert\ngulp trust-dev-cert\n</code></pre> <p>A package can be created with the following commands:</p> <p>Debug:</p> <pre><code>gulp clean\ngulp bundle\ngulp package-solution\n</code></pre> <p>Release:</p> <pre><code>gulp clean\ngulp bundle --ship\ngulp package-solution --ship\n</code></pre> <p>The package is then available under the &lt;Project path&gt;\\sharepoint\\solution folder.</p>"},{"location":"onPrem/SPFx/createProject/#debug-project","title":"Debug project","text":"<p>A service is started locally with the following command:</p> <pre><code>gulp serve --nobrowser\n</code></pre> <p>Depending on the language, debugging can be done with locale:</p> <pre><code>gulp serve \u2013-nobrowser --locale de-de\n</code></pre> <p>The current version of the directory under which the command was called is then available under the workbench link /_layouts/15/workbench.aspx. The workbench link can be appended behind any site url e.g.: https://mysp.microsoft.com/sites/News/_layouts/15/workbench.aspx in this example all lists, fields etc. are available to you which available at web https://mysp.microsoft.com/sites/News, but the code is the local unminified code.</p>"},{"location":"onPrem/SPFx/createProject/#create-app-catalog","title":"Create App Catalog","text":"<p>If there is still no AppCatalog for the existing WebApplication, this can be created in the Central Admin under Apps by selecting the WebApplication and clicking \"Create a new app catalog site\".</p> <p></p> <p></p>"},{"location":"onPrem/SPFx/createProject/#publish","title":"Publish","text":"<p>The package can then be uploaded to the AppCatalog under \"Apps for SharePoint\".</p> <p></p> <p>The package is then available as an installable app for all site collections and can be installed using \u00abAdd app\u00bb.</p>"},{"location":"onPrem/SPFx/createProject/#sp2016","title":"SP2016","text":"<p>With SP2016, the JavaScript files are still outside of the package, so a DocLib must be provided where the JS files can be stored. The App Catalog site is ideally suited, under which a DocLib can be created, e.g. with the name CDN, where a subfolder can then be created for each package, for example, to which the files can then be uploaded from the path: &lt;Project path&gt;/temp/deploy. So that SPFx can link to the correct folder, the cdnBasePath must be defined in the &lt;Project path&gt;/config/write-manifests.json file, e.g. /sites/appcatalog/cdn/myproject. The package can be found under &lt;Project path&gt;/sharepoint/solution.</p>"},{"location":"onPrem/SPFx/createProject/#sp2019","title":"SP2019","text":"<p>From SP2019 the JavaScript files are included in the package. The package can be found under &lt;Project path&gt;/sharepoint/solution.</p>"},{"location":"onPrem/SPFx/devenv/","title":"Kusi's SPFx Knowledgebase","text":""},{"location":"onPrem/SPFx/devenv/#development-environment","title":"Development environment","text":"<p>The development itself has no longer to be developed directly on the server as it used to be, but can also be done on a client.</p>"},{"location":"onPrem/SPFx/devenv/#nodejs","title":"Node.js","text":"<p>Node.js must be installed on the development environment. The setup for the respective version can be downloaded from https://nodejs.org/dist.</p>"},{"location":"onPrem/SPFx/devenv/#nuget-manager","title":"NuGet Manager","text":"<p>The NuGet Manager can be installed using Powershell:</p> <pre><code>Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force\n</code></pre>"},{"location":"onPrem/SPFx/devenv/#yeoman-gulp-und-microsoft-sharepoint-generator","title":"Yeoman, Gulp und Microsoft SharePoint Generator","text":"<p>Then the missing NPM packages can be installed using PowerShell:</p> <pre><code>npm install -g yo@3.1.1 gulp@4.0.2 @microsoft/generator-sharepoint@1.12.1\n</code></pre>"},{"location":"onPrem/SPFx/devenv/#visual-studio-code","title":"Visual Studio Code","text":"<p>You need Visual Studio Code for the development:</p> <p>https://code.visualstudio.com/download</p>"},{"location":"onPrem/SPFx/intro/","title":"Kusi's SPFx Knowledgebase","text":""},{"location":"onPrem/SPFx/intro/#introduction","title":"Introduction","text":"<p>In the past, if you wanted to build custom reusable WebParts, you had to write server code that had to be installed server-side directly on the server. Since SharePoint 2016 with Feature Pack 2, there is a possibility to package a Clientside WebPart that can be stored in the App Catalog Site Collection. If you have the appropriate rights, the package can be installed without having to connect directly to the server, and the package can also be replaced without provoking an app pool reset, meaning there is no down time. In this guide, I would like to offer you a \"step-by-step\" guide that will help you to create an SPFx package for SP2016, SP2019 or SharePoint Online.</p>"},{"location":"onPrem/SPFx/intro/#versions","title":"Versions","text":"<p>SPFx Version 1.1.0 is supplied with SharePoint Feature Pack 2 (corresponds to CU 09.17). SPFx 1.4.1 is included with SharePoint 2019/SE. SE get SPFx 1.5.1 with the March 2023 Patch. SharePoint Online currently uses 1.17.1</p> SP2016 SP2019 SPSE SPOnline SPFx Node.js 6.x/8.x 6.x/8.x 6.x/8.x 16.13+ NPM v3/v4 v3/v4 v3/v4 v5/v6/v7/v8 TypeScript 2.2.2 2.4.2 2.4.2 3.3 React 15.4.2 15.6.2 15.6.2 17.0.1 Yeoman 3.x 3.x 3.x 3.x Gulp 4.x 4.x 4.x 4.x @microsoft/generator-sharepoint 1.17.1 1.17.1 1.17.1 1.17.1"},{"location":"onPrem/SPFx/migrate16to19/","title":"Kusi's SPFx Knowledgebase","text":""},{"location":"onPrem/SPFx/migrate16to19/#migrate-spfx-2016-to-2019","title":"Migrate SPFx 2016 to 2019","text":"<p>To migrate an SPFx package from 2016 to 2019, adjustments to certain files are necessary, after which only the package should be available instead of the old packages with the necessary JS files.</p>"},{"location":"onPrem/SPFx/migrate16to19/#file-customizations","title":"File Customizations","text":"<p>Make the red text changes to the 2016 solution and rebuild.</p>"},{"location":"onPrem/SPFx/migrate16to19/#configconfigjson","title":"config/config.json","text":"<pre><code>{\n  \"$schema\": \"https://developer.microsoft.com/json-schemas/spfx-build/config.2.0.schema.json\",\n  \"version\": \"2.0\",\n  \"bundles\": {\n    \"hello-world-web-part\": {\n      \"entries\"\"components\": [\n        {\n          \"entrypoint\": \"./lib/webparts/helloWorld/HelloWorldWebPart.js\",\n          \"manifest\": \"./src/webparts/helloWorld/HelloWorldWebPart.manifest.json\",\n          \"outputPath\": \"./dist/hello-world-web-part.js\"\n        }\n      ]\n    }\n  },\n  \"externals\": {},\n  \"localizedResources\": {\n    \"HelloWorldWebPartStrings\": \"lib/webparts/helloWorld/loc/{locale}.js\"\n...</code></pre>"},{"location":"onPrem/SPFx/migrate16to19/#configpackage-solutionjson","title":"config/package-solution.json","text":"<pre><code>...\n\"version\": \"1.0.0.0\",\n\"includeClientSideAssets\": true\n...</code></pre>"},{"location":"onPrem/SPFx/migrate16to19/#configwrite-manifestjson","title":"config/write-manifest.json","text":"<pre><code>...\n\"cdnBasePath\": \"&lt;!-- PATH TO CDN --&gt;\"\n...</code></pre>"},{"location":"onPrem/SPFx/migrate16to19/#yo-rcjson","title":".yo-rc.json","text":"<pre><code>...\n\"environment\": \"onprem19\"\n...</code></pre>"},{"location":"onPrem/SPFx/migrate16to19/#packagejson","title":"package.json","text":"<pre><code>...\n\"dependencies\": {\n    \"react\": \"15.6.2\",\n    \"react-dom\": \"15.6.2\",\n    \"@types/react\": \"15.6.6\",\n    \"@types/react-dom\": \"15.5.6\",\n    \"@types/react-addons-shallow-compare\": \"0.14.17\",\n    \"@types/react-addons-update\": \"0.14.14\",\n    \"@types/react-addons-test-utils\": \"0.14.15\",\n    \"@microsoft/sp-core-library\": \"~1.4.0\",\n    \"@microsoft/sp-webpart-base\": \"~1.4.0\",\n    \"@microsoft/sp-lodash-subset\": \"~1.4.0\",\n    \"@microsoft/sp-office-ui-fabric-core\": \"~1.4.0\",\n    ...\n  },\n  \"resolutions\": {\n    \"@types/react\": \"15.6.6\"\n  },\n  \"devDependencies\": {\n    \"@microsoft/sp-build-web\": \"~1.4.1\",\n    \"@microsoft/sp-module-interfaces\": \"~1.4.1\",\n    \"@microsoft/sp-webpart-workbench\": \"~1.4.1\",\n...</code></pre>"},{"location":"onPrem/SPFx/migrate16to19/#tsconfigjson","title":"tsconfig.json","text":"<pre><code>...\n    \"module\": \"commonjs\"\"esnext\",\n    \"moduleResolution\": \"node\",\n...\n    \"typeRoots\": [\n      \"./node_modules/@types\",\n      \"./node_modules/@microsoft\"\n    ],\n...</code></pre>"},{"location":"onPrem/SPFx/migrate16to19/#gulpfilejs","title":"gulpfile.js","text":"<pre><code>...\nconst gulpSequence = require('gulp-sequence');\nconst del = require('del');\n\ngulp.task('cleanup', function(){\n     return del(['dist/**','lib/**','release/**','sharepoint/**','temp/**'], {force:true});\n});\n...\ngulp.task('dist', gulpSequence('clean', 'cleanup', 'bundle', 'package-solution'));\n...</code></pre>"},{"location":"onPrem/SPFx/migrate16to19/#readmemd","title":"README.md","text":"<pre><code>## sp-2019\n...</code></pre>"},{"location":"onPrem/SPFx/projectStructure/","title":"Kusi's SPFx Knowledgebase","text":""},{"location":"onPrem/SPFx/projectStructure/#project-structure","title":"Project structure","text":""},{"location":"onPrem/SPFx/projectStructure/#package-configuration","title":"Package configuration","text":""},{"location":"onPrem/SPFx/projectStructure/#package-solution","title":"Package Solution","text":"<pre><code>Path: &lt;Projectpath&gt;/config/package-solution.json</code></pre> <p>The name and the name of the file can be adjusted in the package-solution.json file. The version can also be defined.</p>"},{"location":"onPrem/SPFx/projectStructure/#package","title":"Package","text":"<pre><code>Path: &lt;Projectpath&gt;/package.json</code></pre> <p>The package.json file also has the version, it should be the same as the version above.</p> <p>Additional modules that can be used in the package can be entered in the dependencies section. The same can be achieved with:</p> <pre><code>npm &lt;modulename&gt; --install \u2013save\n</code></pre> <p>In the devDependencies section, additional modules can be entered that are only used for development and should not be compiled into the package. The same can be achieved with:</p> <pre><code>npm &lt;modulename&gt; --install --save-dev\n</code></pre> <p>If the packages were added manually in the package.json file, the packages can be downloaded with the following command:</p> <pre><code>npm -i\n</code></pre>"},{"location":"onPrem/SPFx/projectStructure/#gulpfile","title":"Gulpfile","text":"<pre><code>Path: &lt;Projectpath&gt;/gulpfile.js</code></pre> <p>So that the package can be created directly using gulp dist, gulp-sequence must first be installed:</p> <pre><code>npm install gulp-sequence@^1.0.0 --save-dev\n</code></pre> <pre><code>'use strict';\nif (process.argv.indexOf('dist') !== -1){\nprocess.argv.push('--ship');\n}\nconst gulp = require('gulp');\nconst build = require('@microsoft/sp-build-web');\nconst gulpSequence = require('gulp-sequence');\nbuild.addSuppression(`Warning - [sass] The local CSS class 'ms-Grid' is not camelCase and will not be type-safe.`);\ngulp.task('dist', gulpSequence('clean', 'bundle', 'package-solution'));\nbuild.initialize(gulp);\n</code></pre> <p>Under SP2019 there was the problem that the package got bigger with each build. It is therefore advisable to delete the old temp files there:</p> <pre><code>'use strict';\nif (process.argv.indexOf('dist') !== -1){\nprocess.argv.push('--ship');\n}\nconst gulp = require('gulp');\nconst build = require('@microsoft/sp-build-web');\nconst gulpSequence = require('gulp-sequence');\nconst del = require('del');\ngulp.task('cleanup', function(){\nreturn del(['dist/**','lib/**','release/**','sharepoint/**','temp/**'], {force:true});\n});\nbuild.addSuppression(`Warning - [sass] The local CSS class 'ms-Grid' is not camelCase and will not be type-safe.`);\ngulp.task('dist', gulpSequence('clean', 'cleanup', 'bundle', 'package-solution'));\nbuild.initialize(gulp);\n</code></pre> <p>The release package can then be created using the following command:</p> <pre><code>gulp dist\n</code></pre>"},{"location":"onPrem/SPFx/projectStructure/#webpart","title":"WebPart","text":""},{"location":"onPrem/SPFx/projectStructure/#manifest","title":"Manifest","text":"<pre><code>Path: &lt;Projectpath&gt;/webparts/&lt;WebPartName&gt;/&lt;WebPartName&gt;WebPart.manifest.json</code></pre> <p>The groupid value can be a new GUID and given a name in the group value. This name is then used as a category in the classic design.</p> <p></p> <p>With the value officeFabricIconFontName the icon can be defined in modern design.</p> <p></p>"},{"location":"onPrem/SPFx/projectStructure/#styling","title":"Styling","text":"<pre><code>Path: &lt;Projectpath&gt;/webparts/&lt;WebPartName&gt;/components/&lt;WebPartName&gt;.module.scss</code></pre> <p>The styles can be defined in this file, they can be nested and then converted into a correct CSS when compiling. The name can then be accessed using styles.&lt;Name&gt;. Global CSS classes can be defined using global keyword.</p> <p>Example:</p> <pre><code>:global(#spPageCanvasContent .CanvasZone) {\nmax-width: unset;\n}\n</code></pre>"},{"location":"onPrem/SPFx/projectStructure/#interfaces","title":"Interfaces","text":"<pre><code>Path: &lt;Projectpath&gt;/webparts/&lt;WebPartName&gt;/components/I&lt;WebPartName&gt;.ts</code></pre> <p>This file contains the interfaces for this WebPart.</p> <p>Example:</p> <pre><code>export interface I&lt;WebPartName&gt;State {\nerror?: undefined;\nisLoaded?: boolean;\nitems?: IItem[];\nselectedItem?: IItem;\n}\nexport interface IItem {\nID: number;\nTitle: string;\n}\n</code></pre>"},{"location":"onPrem/SPFx/projectStructure/#properties","title":"Properties","text":"<pre><code>Path: &lt;Projectpath&gt;/webparts/&lt;WebPartName&gt;/components/I&lt;WebPartName&gt;Props.ts</code></pre> <p>Props contains global variables and properties from the settings panel Example:</p> <pre><code>import { SPHttpClient } from '@microsoft/sp-http';\nexport interface I&lt;WebPartName&gt;Props {\nsiteurl: string;\nspHttpClient: SPHttpClient;\n}\n</code></pre>"},{"location":"onPrem/SPFx/projectStructure/#init-file","title":"Init file","text":"<pre><code>Path: &lt;Projectpath&gt;/webparts/&lt;WebPartName&gt;/&lt;WebPartName&gt;WebPart.ts</code></pre> <p>The global values of props are defined here Example:</p> <pre><code>  public render(): void {\nconst element: React.ReactElement&lt;I&lt;WebPartName&gt;Props &gt; = React.createElement(\n&lt;WebPartName&gt;,\n{\nsiteurl: this.context.pageContext.web.absoluteUrl,\nspHttpClient: this.context.spHttpClient\n}\n);\nReactDom.render(element, this.domElement);\n}\n</code></pre>"},{"location":"onPrem/SPFx/projectStructure/#code","title":"Code","text":"<pre><code>Path: &lt;Projectpath&gt;/webparts/&lt;WebPartName&gt;/components/I&lt;WebPartName&gt;.tsx</code></pre> <p>Example:</p> <pre><code>import * as React from 'react';\nimport styles from './&lt;WebPartName&gt;.module.scss';\nimport { I&lt;WebPartName&gt;Props } from './I&lt;WebPartName&gt;Props';\nimport { SPHttpClient } from '@microsoft/sp-http';\nimport { Spinner, SpinnerSize } from 'office-ui-fabric-react';\nimport { I&lt;WebPartName&gt;State, IItem } from './I&lt;WebPartName&gt;';\nexport default class &lt;WebPartName&gt; extends React.Component&lt;I&lt;WebPartName&gt;Props, I&lt;WebPartName&gt;State&gt; {\npublic constructor(props: I&lt;WebPartName&gt;Props) {\nsuper(props);\nthis.state = {\nerror: undefined,\nisLoaded: false,\nitems: [],\nselectedItem: undefined\n};\n}\npublic componentDidMount(): void {\nlet items: IItem[] = [];\nthis.props.spHttpClient.get(`${this.props.siteurl}/_api/web/lists/getbytitle('&lt;ListName&gt;')/Items` +\n`?$select=Id,Title`,\nSPHttpClient.configurations.v1)\n.then(resType =&gt; resType.json())\n.then(resType =&gt; {\nif (resType.value) {\nitems = resType.value;\n}\nthis.setState({\nitems: items,\nisLoaded: true\n});\n});\n}\npublic render(): React.ReactElement&lt;IKnowledgeBaseProps&gt; {\nconst { items, selectedItem, error, isLoaded } = this.state;\nlet retValue: JSX.Element = &lt;div&gt;{strings.NoData}&lt;/div&gt;;\nif (error) {\nretValue = &lt;div className={styles.error}&gt;{strings.Error}: {error}&lt;/div&gt;;\n} else if (!isLoaded) {\nif (SpinnerSize &amp;&amp; SpinnerSize.large) {\nretValue = &lt;div className={styles.loadingWrapper}&gt;\n&lt;Spinner size={SpinnerSize.large} label={strings.OnLoading} /&gt;\n&lt;/div&gt;;\n} else {\nretValue = &lt;div&gt;{strings.OnLoading}&lt;/div&gt;;\n}\n} else if (selectedItem) {\nretValue = &lt;div className={styles.container}&gt;\n&lt;div className={styles.grouptext}&gt;{selectedItem.Title}&lt;/div&gt;\n&lt;/div&gt;;\n} else {\nretValue = &lt;div className={styles.container}&gt;{items.map(g =&gt;\n&lt;div&gt;&lt;div className={styles.grouptext}&gt;{g.Title}&lt;/div&gt;&lt;/div&gt;\n)}\n&lt;/div&gt;;\n}\nreturn (\n&lt;div className={styles.KnowledgeBase}&gt;{retValue}&lt;/div&gt;\n);\n}\n}\n</code></pre>"},{"location":"onPrem/SPFx/utils/","title":"Kusi's Knowledge Base","text":""},{"location":"onPrem/SPFx/utils/#convert-base64-to-file","title":"Convert Base64 to File","text":"<pre><code>public convertBase64ToFile(base64string: string, fileName: string, type: string): File {\nconst binaryImg: string = atob(base64string.substring(base64string.indexOf(\",\") + 1));\nconst length: number = binaryImg.length;\nconst ab: ArrayBuffer = new ArrayBuffer(length);\nconst ua: Uint8Array = new Uint8Array(ab);\nfor (let i: number = 0; i &lt; length; i++) {\nua[i] = binaryImg.charCodeAt(i);\n}\nconst blob: Blob = new Blob([ab], {\ntype: type,\n});\nreturn new File([blob], fileName, { type: type });\n}\n</code></pre>"},{"location":"onPrem/SPFx/utils/#upload-file-to-folder","title":"Upload file to folder","text":"<pre><code>public async uploadFileToFolder(\nfileObj: File,\nurl: string,\nurlOrigin: string,\ninstance: IPublicClientApplication,\naccounts: AccountInfo[]\n): Promise&lt;number&gt; {\nreturn new Promise&lt;number&gt;((resolve, reject) =&gt; {\nthis.getFileBuffer(fileObj).then(\n(f) =&gt; {\nif (f) {\nconst request: RedirectRequest = {\naccount: accounts[0],\nscopes: [urlOrigin + \"/.default\"],\n};\ninstance.acquireTokenSilent(request).then((response) =&gt; {\nfetch(url, {\nmethod: \"POST\",\nheaders: {\nAuthorization: `Bearer ${response.accessToken}`,\n\"odata-version\": \"3.0\",\nAccept: \"application/json;odata=verbose\",\n\"Content-Type\": \"application/json;odata=verbose\",\n\"IF-MATCH\": \"*\",\n\"X-HTTP-Method\": \"POST\",\n},\nbody: f,\n})\n.then((res) =&gt; res.json())\n.then((res) =&gt; {\nif (res &amp;&amp; res.d) {\nresolve(res.d.ListItemAllFields ? res.d.ListItemAllFields.Id : 0);\n} else if (res &amp;&amp; res.error) {\nreject(`${res.error.code}: ${res.error.message.value}`);\n}\n})\n.catch((e) =&gt; {\nreject(e.message);\n});\n});\n} else {\nreject(\"file buffer ist leer\");\n}\n},\n(e) =&gt; {\nreject(e);\n}\n);\n});\n}\n</code></pre>"},{"location":"onPrem/SPFx/utils/#get-file-buffer","title":"Get file Buffer","text":"<pre><code>  private getFileBuffer(uploadFile: File): Promise&lt;string | ArrayBuffer&gt; {\nconst reader: FileReader = new FileReader();\nreturn new Promise&lt;string | ArrayBuffer&gt;((resolve, reject) =&gt; {\nreader.onloadend = () =&gt; {\nconst target: FileReader = event.target as FileReader;\nresolve(target.result);\n};\nreader.onerror = (e) =&gt; {\nreject(e);\n};\nreader.readAsArrayBuffer(uploadFile);\n});\n}\n</code></pre>"},{"location":"onPrem/SPFx/utils/#get-user-properties","title":"Get User Properties","text":"<pre><code>    public static GetUserInfo(spHttpClient: SPHttpClient, siteurl: string,\nculture: string): Promise&lt;string&gt; {\nconst storageKey: string = 'currentCultureKey';\nlet currentCulture: string = undefined;\nreturn new Promise&lt;string&gt;((resolve, reject) =&gt; {\nif (localStorage.getItem(storageKey) != null) {\ncurrentCulture = localStorage.getItem(storageKey);\nresolve(currentCulture);\n} else {\n// Get from SP.UserProfiles.PeopleManager API.\nspHttpClient.post(`${siteurl}/_api/SP.UserProfiles.PeopleManager/getmyproperties`,\nSPHttpClient.configurations.v1, undefined)\n.then(res =&gt; res.json())\n.then(res =&gt; {\ncurrentCulture = res.UserProfileProperties.filter(i =&gt;\ni.Key === 'SPS-MUILanguages')[0].Value.split(',')[0];\nlocalStorage.setItem(storageKey, currentCulture);\nresolve(currentCulture);\n});\n}\n});\n}\n</code></pre>"},{"location":"onPrem/SPFx/utils/#get-terms","title":"Get Terms","text":"<pre><code>import { Session, ITermData } from '@pnp/sp-taxonomy';\nconst taxonomy = new Session(this.props.siteurl);\nconst stores = await taxonomy.termStores.get();\nawait stores[0].getTermSetById(termGUID).terms.get().then((resp2: ITermData[]) =&gt; {\n...\n});\n</code></pre>"}]}